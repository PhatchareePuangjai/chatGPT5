#!/usr/bin/env python3
# test_google_sheets_connection.py
# Google Sheets Connection Tester for Chat Logger
# ===============================================
"""
‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏à‡∏£‡∏¥‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

‡∏ß‡∏¥‡∏ò‡∏µ‡πÉ‡∏ä‡πâ: ‡∏£‡∏±‡∏ô‡∏à‡∏≤‡∏Å project root directory
python3 testing/test_google_sheets_connection.py
"""

import json
import os
import requests
import time
from datetime import datetime
from zoneinfo import ZoneInfo
from dotenv import load_dotenv

# ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
load_dotenv()

GS_WEBAPP_URL = os.getenv(
    "GS_WEBAPP_URL", "https://script.google.com/macros/s/XXXX/exec"
)
GS_API_KEY = os.getenv("GS_API_KEY", "my-secret-12345")
TZ = os.getenv("LOCAL_TZ", "Asia/Bangkok")


def log(message, level="INFO"):
    """‡∏£‡∏∞‡∏ö‡∏ö logging ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô"""
    timestamp = datetime.now(ZoneInfo(TZ)).strftime("%Y-%m-%d %H:%M:%S")
    emoji = {"INFO": "‚ÑπÔ∏è", "SUCCESS": "‚úÖ", "ERROR": "‚ùå", "WARNING": "‚ö†Ô∏è", "TEST": "üß™"}
    print(f"[{timestamp}] {emoji.get(level, '‚ÑπÔ∏è')} {message}")


def test_environment():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ environment"""
    log("=== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Environment ===", "TEST")

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö .env file
    if os.path.exists("../.env"):
        log("‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå .env", "SUCCESS")
        with open("../.env", "r") as f:
            content = f.read()
            if "GS_WEBAPP_URL" in content:
                log("‡∏û‡∏ö GS_WEBAPP_URL ‡πÉ‡∏ô .env", "SUCCESS")
            else:
                log("‡πÑ‡∏°‡πà‡∏û‡∏ö GS_WEBAPP_URL ‡πÉ‡∏ô .env", "WARNING")
    else:
        log("‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå .env", "WARNING")

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏î‡πâ
    log(
        f"GS_WEBAPP_URL: {GS_WEBAPP_URL[:50]}{'...' if len(GS_WEBAPP_URL) > 50 else ''}"
    )
    log(f"GS_API_KEY: {GS_API_KEY[:10]}{'...' if len(GS_API_KEY) > 10 else ''}")

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤ default ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if GS_WEBAPP_URL == "https://script.google.com/macros/s/XXXX/exec":
        log("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ GS_WEBAPP_URL ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç!", "WARNING")
        return False

    if GS_API_KEY == "my-secret-12345":
        log("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÉ‡∏ä‡πâ GS_API_KEY ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô - ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç!", "WARNING")
        return False

    log("‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ environment ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "SUCCESS")
    return True


def test_basic_connection():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"""
    log("=== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô ===", "TEST")

    try:
        # ‡∏™‡πà‡∏á GET request ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠
        response = requests.get(GS_WEBAPP_URL, timeout=10)
        log(f"HTTP Status: {response.status_code}")
        log(f"Response Length: {len(response.text)} chars")

        if response.status_code == 200:
            log("‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "SUCCESS")
            return True
        else:
            log(f"‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: HTTP {response.status_code}", "ERROR")
            return False

    except requests.exceptions.Timeout:
        log("‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ (timeout)", "ERROR")
        return False
    except requests.exceptions.RequestException as e:
        log(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠: {e}", "ERROR")
        return False


def test_data_submission():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á"""
    log("=== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á ===", "TEST")

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    test_data = {
        "timestamp": datetime.now(ZoneInfo(TZ)).isoformat(),
        "session_id": "TEST_SESSION_001",
        "conversation_title": "üß™ Test Connection",
        "user_prompt": "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets",
        "ai_response": "‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ",
        "turn_count": 1,
        "api_key": GS_API_KEY,
    }

    log(f"‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏î‡∏™‡∏≠‡∏ö: session {test_data['session_id']}")

    try:
        response = requests.post(
            GS_WEBAPP_URL,
            json=test_data,
            headers={"Content-Type": "application/json"},
            timeout=30,
        )

        log(f"HTTP Status: {response.status_code}")
        log(
            f"Response: {response.text[:200]}{'...' if len(response.text) > 200 else ''}"
        )

        if response.status_code == 200:
            try:
                result = response.json()
                log(f"üìä JSON Response: {result}")

                # ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö response format ‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢
                success_indicators = [
                    result.get("status") == "success",
                    result.get("ok") == True,
                    result.get("success") == True,
                    "success" in str(result).lower(),
                    "ok" in str(result).lower(),
                ]

                if any(success_indicators):
                    log("‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", "SUCCESS")
                    log(f"üéØ Response format: {type(result).__name__}")
                    log(f"üéØ Response content: {result}")
                    return True
                else:
                    log(
                        f"‚ùå Server ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö error: {result.get('message', result.get('error', 'Unknown error'))}",
                        "ERROR",
                    )
                    log(f"üìä Full response: {result}")
                    return False
            except json.JSONDecodeError:
                log("‚ùå Response ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON format", "ERROR")
                log(f"Raw response: {response.text}")
                return False
        else:
            log(f"‚ùå HTTP Error {response.status_code}", "ERROR")
            return False

    except requests.exceptions.Timeout:
        log("‚è∞ ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤ (timeout)", "ERROR")
        return False
    except requests.exceptions.RequestException as e:
        log(f"üåê ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•: {e}", "ERROR")
        return False


def test_response_format():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏à‡∏≤‡∏Å Google Apps Script"""
    log("=== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö ===", "TEST")

    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ error
    invalid_data = {"invalid_field": "test", "api_key": "wrong_key"}

    try:
        response = requests.post(
            GS_WEBAPP_URL,
            json=invalid_data,
            headers={"Content-Type": "application/json"},
            timeout=10,
        )

        log(f"Invalid data test - HTTP Status: {response.status_code}")
        log(f"Response: {response.text}")

        # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏î‡πâ response ‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡πà‡∏≤ server ‡∏£‡∏±‡∏ö request ‡πÑ‡∏î‡πâ
        if response.status_code in [200, 400, 422]:
            log("Server ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏• request ‡πÑ‡∏î‡πâ", "SUCCESS")
            return True
        else:
            log("Server ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤", "WARNING")
            return False

    except Exception as e:
        log(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}", "ERROR")
        return False


def check_sheet_accessibility():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Google Sheets ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    log("=== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á Google Sheets ===", "TEST")

    # ‡πÅ‡∏¢‡∏Å‡πÄ‡∏≠‡∏≤ Script ID ‡∏à‡∏≤‡∏Å URL
    import re

    match = re.search(r"/macros/s/([a-zA-Z0-9_-]+)/", GS_WEBAPP_URL)
    if match:
        script_id = match.group(1)
        log(f"Google Apps Script ID: {script_id}")

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ URL ‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if len(script_id) > 20:
            log("Script ID ‡∏°‡∏µ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "SUCCESS")
            return True
        else:
            log("Script ID ‡∏≠‡∏≤‡∏à‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "WARNING")
            return False
    else:
        log("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏¢‡∏Å Script ID ‡∏à‡∏≤‡∏Å URL ‡πÑ‡∏î‡πâ", "ERROR")
        return False


def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö"""
    log("üß™ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets", "TEST")
    log("=" * 50)

    tests = [
        ("Environment Configuration", test_environment),
        ("Basic Connection", test_basic_connection),
        ("Sheet Accessibility", check_sheet_accessibility),
        ("Response Format", test_response_format),
        ("Data Submission", test_data_submission),
    ]

    results = {}

    for test_name, test_func in tests:
        log(f"\nüß™ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏î‡∏™‡∏≠‡∏ö: {test_name}")
        try:
            result = test_func()
            results[test_name] = result
            if result:
                log(f"‚úÖ {test_name}: PASSED")
            else:
                log(f"‚ùå {test_name}: FAILED")
        except Exception as e:
            log(f"üí• {test_name}: ERROR - {e}", "ERROR")
            results[test_name] = False

    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö
    log("\n" + "=" * 50)
    log("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö", "TEST")

    passed = sum(1 for r in results.values() if r)
    total = len(results)

    for test_name, result in results.items():
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        log(f"  {test_name}: {status}")

    log(f"\nüéØ ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏£‡∏ß‡∏°: {passed}/{total} tests passed")

    if passed == total:
        log("üéâ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡∏õ‡∏Å‡∏ï‡∏¥!", "SUCCESS")
    elif passed >= total // 2:
        log("‚ö†Ô∏è ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ö‡∏≤‡∏á‡∏™‡πà‡∏ß‡∏ô ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö", "WARNING")
    else:
        log("‚ùå ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏£‡πâ‡∏≤‡∏¢‡πÅ‡∏£‡∏á ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", "ERROR")

    return passed == total


if __name__ == "__main__":
    success = main()
    exit(0 if success else 1)
