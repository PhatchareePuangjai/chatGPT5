#!/usr/bin/env python3
# debug_google_sheets.py
# Google Sheets Debugging & Comparison Tool
# ========================================
"""
‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏°‡∏∑‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö debug ‡πÅ‡∏•‡∏∞‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á v0 vs v1.0
‡πÅ‡∏•‡∏∞‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets
"""

import json
import os
import requests
from datetime import datetime
from zoneinfo import ZoneInfo
from dotenv import load_dotenv

load_dotenv()

GS_WEBAPP_URL = os.getenv("GS_WEBAPP_URL")
GS_API_KEY = os.getenv("GS_API_KEY")
TZ = os.getenv("LOCAL_TZ", "Asia/Bangkok")


def log(message, type="INFO"):
    """Consistent logging function"""
    timestamp = datetime.now(ZoneInfo(TZ)).strftime("%Y-%m-%d %H:%M:%S")
    emoji = {"INFO": "‚ÑπÔ∏è", "SUCCESS": "‚úÖ", "ERROR": "‚ùå", "WARNING": "‚ö†Ô∏è", "DEBUG": "üîç"}
    print(f"[{timestamp}] {emoji.get(type, '‚ÑπÔ∏è')} {message}")


def analyze_logs():
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå logs ‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏£‡∏±‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏•‡πâ‡∏ß"""
    log("=== ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏à‡∏≤‡∏Å logs ===", "DEBUG")

    # ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà user ‡πÉ‡∏´‡πâ‡∏°‡∏≤
    observations = [
        "‡∏£‡∏±‡∏ô export_to_sheet.py (v0) ‡πÅ‡∏ó‡∏ô export_to_sheet_v1_atomic.py",
        "HTTP Status 200 ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        "‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 12 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
        "‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Google Sheets",
        "‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì 3-4 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ï‡πà‡∏≠ request",
    ]

    for obs in observations:
        log(f"üìù {obs}")

    log("\nüéØ ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡πÑ‡∏õ‡πÑ‡∏î‡πâ:", "DEBUG")
    problems = [
        "Google Apps Script ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ save ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á",
        "API Key ‡∏´‡∏£‡∏∑‡∏≠ permission ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
        "Sheet structure ‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á",
        "Response 200 ‡πÅ‡∏ï‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•",
        "Caching ‡∏´‡∏£‡∏∑‡∏≠ delay ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•",
    ]

    for i, problem in enumerate(problems, 1):
        log(f"  {i}. {problem}")


def test_data_format():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡πÑ‡∏õ"""
    log("=== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ===", "DEBUG")

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö v0
    v0_data = {
        "timestamp": datetime.now(ZoneInfo(TZ)).isoformat(),
        "session_id": "DEBUG_TEST_001",
        "conversation_title": "üîç Debug Test v0 Format",
        "user_prompt": "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏ö‡∏ö v0",
        "ai_response": "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏î‡πâ‡∏ß‡∏¢‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö export_to_sheet.py (v0)",
        "turn_count": 1,
        "api_key": GS_API_KEY,
    }

    log("üì§ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö v0...")
    log(f"üìä Data size: {len(json.dumps(v0_data))} bytes")

    try:
        response = requests.post(
            GS_WEBAPP_URL,
            json=v0_data,
            headers={"Content-Type": "application/json"},
            timeout=20,
        )

        log(f"üìä Status: {response.status_code}")
        log(f"üìÑ Response length: {len(response.text)} chars")
        log(f"üìÑ Response: {response.text}")

        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå response
        if response.status_code == 200:
            try:
                result = response.json()
                log(f"‚úÖ JSON Response: {result}")

                if result.get("status") == "success":
                    log("‚úÖ Data processed successfully!", "SUCCESS")
                    return True
                else:
                    log(f"‚ùå Server error: {result.get('message', 'Unknown')}", "ERROR")
                    return False

            except json.JSONDecodeError:
                log("‚ö†Ô∏è Response is not JSON - checking content", "WARNING")
                if "success" in response.text.lower():
                    log("‚úÖ Probably successful (text response)", "SUCCESS")
                    return True
                else:
                    log(f"‚ùå Unexpected response: {response.text[:200]}", "ERROR")
                    return False
        else:
            log(f"‚ùå HTTP Error: {response.status_code}", "ERROR")
            return False

    except Exception as e:
        log(f"üí• Exception: {e}", "ERROR")
        return False


def test_minimal_payload():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥"""
    log("=== ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ ===", "DEBUG")

    minimal_data = {
        "api_key": GS_API_KEY,
        "test": "minimal payload",
        "timestamp": datetime.now().isoformat(),
    }

    log("üì§ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥...")

    try:
        response = requests.post(GS_WEBAPP_URL, json=minimal_data, timeout=10)

        log(f"üìä Status: {response.status_code}")
        log(f"üìÑ Response: {response.text}")

        return response.status_code == 200

    except Exception as e:
        log(f"üí• Exception: {e}", "ERROR")
        return False


def check_google_apps_script():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Google Apps Script"""
    log("=== ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Google Apps Script ===", "DEBUG")

    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå URL
    log(f"üìç URL: {GS_WEBAPP_URL}")

    if "/macros/s/" in GS_WEBAPP_URL and "/exec" in GS_WEBAPP_URL:
        log("‚úÖ URL ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "SUCCESS")
    else:
        log("‚ùå URL ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "ERROR")
        return False

    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö GET request
    log("üì§ ‡∏ó‡∏î‡∏™‡∏≠‡∏ö GET request...")
    try:
        response = requests.get(GS_WEBAPP_URL, timeout=10)
        log(f"üìä GET Status: {response.status_code}")
        log(f"üìÑ GET Response: {response.text[:200]}...")

        if response.status_code == 200:
            log("‚úÖ GET request ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "SUCCESS")
        else:
            log("‚ö†Ô∏è GET request ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "WARNING")

    except Exception as e:
        log(f"‚ùå GET request ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}", "ERROR")

    return True


def diagnostic_summary():
    """‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£ diagnostic"""
    log("=== ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢ ===", "DEBUG")

    recommendations = [
        "1. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Google Sheets - ‡πÄ‡∏õ‡∏¥‡∏î‡∏î‡∏π sheet ‡∏ï‡∏£‡∏á‡πÜ ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà",
        "2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Google Apps Script - ‡∏î‡∏π execution transcript",
        "3. ‡∏•‡∏≠‡∏á‡πÉ‡∏ä‡πâ v1.0 ‡∏ó‡∏µ‡πà‡∏°‡∏µ debug logging ‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤",
        "4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö permission ‡∏Ç‡∏≠‡∏á Google Apps Script",
        "5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡πà‡∏≤‡∏ô Google Apps Script editor ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á",
    ]

    log("üîß ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç:")
    for rec in recommendations:
        log(f"   {rec}")

    log("\nüìã ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:")
    commands = [
        "python quick_test.py  # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡πá‡∏ß",
        "python test_google_sheets_connection.py  # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î",
        "python export_to_sheet_v1_atomic.py chatgpt-export/conversations-28-09-2025.json  # ‡πÉ‡∏ä‡πâ v1.0",
    ]

    for cmd in commands:
        log(f"   {cmd}")


def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    log("üîç ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡∏ô‡∏¥‡∏à‡∏â‡∏±‡∏¢‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Google Sheets", "DEBUG")
    log("=" * 60)

    # 1. ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå logs
    analyze_logs()

    # 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Google Apps Script
    log("")
    check_google_apps_script()

    # 3. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥
    log("")
    minimal_success = test_minimal_payload()

    # 4. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• v0
    log("")
    data_success = test_data_format()

    # 5. ‡∏™‡∏£‡∏∏‡∏õ
    log("")
    diagnostic_summary()

    log("\n" + "=" * 60)
    if minimal_success and data_success:
        log("üéâ Google Sheets connection ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ! ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏≠‡∏≤‡∏à‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•", "SUCCESS")
    elif minimal_success:
        log("‚ö†Ô∏è Connection ‡πÑ‡∏î‡πâ ‡πÅ‡∏ï‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤", "WARNING")
    else:
        log("‚ùå ‡∏°‡∏µ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets", "ERROR")


if __name__ == "__main__":
    main()
