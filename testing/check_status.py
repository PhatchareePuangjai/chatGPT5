#!/usr/bin/env python3
"""
üìã Chat Logger Status Check & Recommendation
===========================================

‡πÄ‡∏ä‡πá‡∏Ñ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏õ‡∏±‡∏ç‡∏´‡∏≤ Google Sheets
"""

import os
import json
from datetime import datetime


def check_files():
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà"""
    print("üîç ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö...")

    files_to_check = [
        ("../export_to_sheet.py", "Original v0"),
        ("../export_to_sheet_v1_atomic.py", "v1.0 with Atomic Prompting"),
        ("../.env", "Environment configuration"),
        ("../.export_cache.json", "Cache file"),
        ("../chatgpt-export/conversations-28-09-2025.json", "Data file"),
        ("../backup_data/", "Local backup directory"),
    ]

    for file_path, description in files_to_check:
        if os.path.exists(file_path):
            if os.path.isdir(file_path):
                count = len(os.listdir(file_path)) if os.path.isdir(file_path) else 0
                print(f"‚úÖ {description}: {file_path} ({count} files)")
            else:
                size = os.path.getsize(file_path)
                print(f"‚úÖ {description}: {file_path} ({size} bytes)")
        else:
            print(f"‚ùå {description}: {file_path} (‡πÑ‡∏°‡πà‡∏û‡∏ö)")


def analyze_problem():
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà user ‡πÉ‡∏´‡πâ"""
    print("\nüéØ ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô...")

    symptoms = [
        "‚úÖ ‡∏£‡∏±‡∏ô export_to_sheet.py ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        "‚úÖ HTTP 200 response ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á",
        "‚úÖ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• 12 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£",
        "‚ùå ‡πÑ‡∏°‡πà‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Google Sheets",
        "‚è∞ ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤ 3-4 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ‡∏ï‡πà‡∏≠ request",
    ]

    for symptom in symptoms:
        print(f"  {symptom}")

    print(f"\nüí° ‡∏™‡∏£‡∏∏‡∏õ: ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡πÅ‡∏ï‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏ô Google Sheets")


def recommend_solutions():
    """‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"""
    print("\nüîß ‡∏ß‡∏¥‡∏ò‡∏µ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç):")

    solutions = [
        (
            "1. ‡πÉ‡∏ä‡πâ v1.0 ‡πÅ‡∏ó‡∏ô v0",
            "python export_to_sheet_v1_atomic.py chatgpt-export/conversations-28-09-2025.json",
            "v1.0 ‡∏°‡∏µ debug logging ‡∏î‡∏µ‡∏Å‡∏ß‡πà‡∏≤ ‡πÅ‡∏•‡∏∞‡∏°‡∏µ local backup",
        ),
        (
            "2. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠",
            "python quick_test.py",
            "‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÄ‡∏£‡πá‡∏ß‡πÜ ‡∏ß‡πà‡∏≤ Google Sheets ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏à‡∏£‡∏¥‡∏á‡πÑ‡∏´‡∏°",
        ),
        (
            "3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Google Sheets ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á",
            "‡πÄ‡∏õ‡∏¥‡∏î Google Sheets ‡πÉ‡∏ô browser",
            "‡∏î‡∏π‡∏ß‡πà‡∏≤‡∏°‡∏µ sheet tab ‡πÅ‡∏•‡∏∞ column headers ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡πÑ‡∏´‡∏°",
        ),
        (
            "4. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Google Apps Script",
            "‡πÄ‡∏õ‡∏¥‡∏î script.google.com ‡πÅ‡∏•‡∏∞‡∏î‡∏π execution transcript",
            "‡∏î‡∏π‡∏ß‡πà‡∏≤ script ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡∏∞‡∏°‡∏µ permission ‡πÑ‡∏´‡∏°",
        ),
        (
            "5. ‡∏ó‡∏î‡∏™‡∏≠‡∏ö debug ‡πÅ‡∏ö‡∏ö‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î",
            "python debug_google_sheets.py",
            "‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô",
        ),
    ]

    for title, command, description in solutions:
        print(f"\n{title}")
        print(f"   ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á: {command}")
        print(f"   ‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•: {description}")


def show_version_comparison():
    """‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö v0 vs v1.0"""
    print("\nüìä ‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö v0 vs v1.0:")

    comparison = [
        ("Error Handling", "‚ùå ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô", "‚úÖ ‡∏Ç‡∏±‡πâ‡∏ô‡∏™‡∏π‡∏á‡∏û‡∏£‡πâ‡∏≠‡∏° fallback"),
        ("Debug Logging", "‚ùå ‡∏ô‡πâ‡∏≠‡∏¢", "‚úÖ ‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏û‡∏£‡πâ‡∏≠‡∏° emoji"),
        ("Local Backup", "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ", "‚úÖ ‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥‡πÉ‡∏ô backup_data/"),
        ("Token Analysis", "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ", "‚úÖ Atomic prompting analysis"),
        ("Config Check", "‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ", "‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á"),
        ("Data Safety", "‚ùå ‡∏™‡∏π‡∏ç‡∏´‡∏≤‡∏¢‡πÑ‡∏î‡πâ", "‚úÖ ‡πÑ‡∏°‡πà‡∏™‡∏π‡∏ç‡∏´‡∏≤‡∏¢‡πÅ‡∏ô‡πà‡∏ô‡∏≠‡∏ô"),
    ]

    print(f"{'Feature':<15} {'v0':<20} {'v1.0'}")
    print("-" * 60)
    for feature, v0, v1 in comparison:
        print(f"{feature:<15} {v0:<20} {v1}")


def main():
    """‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å"""
    print("üß™ Chat Logger Status Check & Recommendation")
    print("=" * 50)

    check_files()
    analyze_problem()
    recommend_solutions()
    show_version_comparison()

    print("\n" + "=" * 50)
    print("üéØ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏£‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô:")
    print(
        "   1. ‡∏£‡∏±‡∏ô: python export_to_sheet_v1_atomic.py chatgpt-export/conversations-28-09-2025.json"
    )
    print("   2. ‡∏£‡∏±‡∏ô: python quick_test.py")
    print("   3. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö Google Sheets ‡πÇ‡∏î‡∏¢‡∏ï‡∏£‡∏á")
    print("\nüí° v1.0 ‡∏à‡∏∞‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏π‡∏ç‡∏´‡∏≤‡∏¢!")


if __name__ == "__main__":
    main()
